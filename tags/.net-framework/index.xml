<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>.NET Framework on Tearth's blog</title><link>https://tearth.dev/tags/.net-framework/</link><description>Recent content in .NET Framework on Tearth's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 09 Jul 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://tearth.dev/tags/.net-framework/index.xml" rel="self" type="application/rss+xml"/><item><title>Mystery of Random class in .NET Framework and .NET Core</title><link>https://tearth.dev/posts/mystery-of-random-class-in-net-framework-and-net-core/</link><pubDate>Thu, 09 Jul 2020 00:00:00 +0000</pubDate><guid>https://tearth.dev/posts/mystery-of-random-class-in-net-framework-and-net-core/</guid><description>&lt;p>&lt;a href="https://docs.microsoft.com/en-us/dotnet/api/system.random.next?view=netcore-3.1">Random&lt;/a> class is one of the most used parts of the .NET library, which contains a few methods to generate pseudo-random numbers. They are extremely simple to use, but even with this, there are still some traps waiting for a programmer. In this article, I will focus on differences in implementation of this class between .NET Framework and .NET Core, especially seed generation which sometimes leads to interesting bugs.&lt;/p></description></item></channel></rss>