<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>.NET Framework on Tearth's blog</title><link>https://tearth.dev/tags/.net-framework/</link><description>Recent content in .NET Framework on Tearth's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 07 Apr 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://tearth.dev/tags/.net-framework/index.xml" rel="self" type="application/rss+xml"/><item><title>Performance of chess engines written in C#, part 2</title><link>https://tearth.dev/posts/performance-of-chess-engines-written-in-csharp-part-2/</link><pubDate>Wed, 07 Apr 2021 00:00:00 +0000</pubDate><guid>https://tearth.dev/posts/performance-of-chess-engines-written-in-csharp-part-2/</guid><description>&lt;p>Half-year ago I did a small text about &lt;a href="https://tearth.dev/posts/performance-of-chess-engines-written-in-csharp-part-1/">writing chess engines in C# and performance issues related to it&lt;/a>, where I presented a few interesting methods of optimizing the engine. Today, I want to extend it a bit by new elements, some of them related to the lastly released .NET 5 - they aren&amp;rsquo;t game-changers, but can nicely improve some parts of code.&lt;/p></description></item><item><title>Performance of chess engines written in C#, part 1</title><link>https://tearth.dev/posts/performance-of-chess-engines-written-in-csharp-part-1/</link><pubDate>Sun, 20 Sep 2020 00:00:00 +0000</pubDate><guid>https://tearth.dev/posts/performance-of-chess-engines-written-in-csharp-part-1/</guid><description>&lt;p>Last month was quite busy - I&amp;rsquo;ve started a new project called Cosette, which is a brand new chess engine written in C# for .NET Core platform. It&amp;rsquo;s not my first project of this kind (a few years ago I made &lt;a href="https://github.com/Tearth/Proxima-b-2.0">Proxima b 2.0&lt;/a> (C#), together with even older &lt;a href="https://github.com/Tearth/Proxima-b">Proxima b&lt;/a> (C++)), so using the gained experience I can finally write a few words about performance tips and tricks, especially in C# language.&lt;/p></description></item><item><title>Mystery of Random class in .NET Framework and .NET Core</title><link>https://tearth.dev/posts/mystery-of-random-class-in-net-framework-and-net-core/</link><pubDate>Thu, 09 Jul 2020 00:00:00 +0000</pubDate><guid>https://tearth.dev/posts/mystery-of-random-class-in-net-framework-and-net-core/</guid><description>&lt;p>&lt;a href="https://docs.microsoft.com/en-us/dotnet/api/system.random.next?view=netcore-3.1">Random&lt;/a> class is one of the most used parts of the .NET library, which contains a few methods to generate pseudo-random numbers. They are extremely simple to use, but even with this, there are still some traps waiting for a programmer. In this article, I will focus on differences in implementation of this class between .NET Framework and .NET Core, especially seed generation which sometimes leads to interesting bugs.&lt;/p></description></item></channel></rss>